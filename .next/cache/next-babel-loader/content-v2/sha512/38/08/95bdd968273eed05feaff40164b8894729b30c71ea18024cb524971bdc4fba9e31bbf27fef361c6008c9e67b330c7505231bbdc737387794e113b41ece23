{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\1. React_Course\\\\6.1NextJS_Advanced_Project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailPage(props) {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetails, {\n      img: props.meetupData.image,\n      address: props.meetupData.address,\n      title: props.meetupData.title,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // only export this fn with getStaticProps\n\n\nexport async function getStaticPaths() {\n  // db connection\n  const client = await MongoClient.connect(\"mongodb+srv://sam:Zxcvbnm-321@nextjs-practice.wbu0y.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close(); // return {\n  //   // this paths array can be generated dynamically\n  //   paths: [\n  //     {\n  //       params: {\n  //         meetupId: \"m1\",\n  //       },\n  //     },\n  //     {\n  //       params: {\n  //         meetupId: \"m2\",\n  //       },\n  //     },\n  //   ],\n  //   fallback: false,\n  // };\n\n  return {\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  // here property would be url identifier (file naem in sq brackets and value would be url param value)\n  const meetupId = context.params.meetupId; // console.log(context.params);\n  // db connection\n\n  const client = await MongoClient.connect(\"mongodb+srv://sam:Zxcvbnm-321@nextjs-practice.wbu0y.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  const meetupData = {\n    id: selectedMeetup._id.toString(),\n    title: selectedMeetup.title,\n    address: selectedMeetup.address,\n    image: selectedMeetup.image,\n    description: selectedMeetup.description\n  };\n  console.log(meetupData);\n  client.close();\n  return {\n    props: {\n      meetupData\n    }\n  };\n}\nexport default MeetupDetailPage; // {\n//   id: \"m1\",\n//   title: \"A First Meetup\",\n//   image:\n//     \"https://upload.wikimedia.org/wikipedia/commons/2/22/Hagia_Sophia_Mars_2013.jpg\",\n//   address: \"Sultan Ahmet, Ayasofya Meydan No:1, 34122 Fatih/İstanbul, Turkey\",\n//   description:\n//     \"Hagia Sophia, officially known as the Holy Hagia Sophia Grand Mosque, and formerly the Church of Hagia Sophia is a Late Antique place of worship in Istanbul, designed by the Greek geometers Isidore of Miletus and Anthemius of Tralles\",\n// }","map":{"version":3,"sources":["D:/1. React_Course/6.1NextJS_Advanced_Project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Head","MeetupDetails","MeetupDetailPage","props","console","log","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nimport Head from \"next/head\";\r\n\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\n\r\nfunction MeetupDetailPage(props) {\r\n  console.log(props);\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>{props.meetupData.title}</title>\r\n        <meta name=\"description\" content={props.meetupData.description} />\r\n      </Head>\r\n      <MeetupDetails\r\n        img={props.meetupData.image}\r\n        address={props.meetupData.address}\r\n        title={props.meetupData.title}\r\n        description={props.meetupData.description}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// only export this fn with getStaticProps\r\nexport async function getStaticPaths() {\r\n  // db connection\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://sam:Zxcvbnm-321@nextjs-practice.wbu0y.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  // return {\r\n  //   // this paths array can be generated dynamically\r\n  //   paths: [\r\n  //     {\r\n  //       params: {\r\n  //         meetupId: \"m1\",\r\n  //       },\r\n  //     },\r\n  //     {\r\n  //       params: {\r\n  //         meetupId: \"m2\",\r\n  //       },\r\n  //     },\r\n  //   ],\r\n  //   fallback: false,\r\n  // };\r\n\r\n  return {\r\n    paths: meetups.map((meetup) => ({\r\n      params: {\r\n        meetupId: meetup._id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // here property would be url identifier (file naem in sq brackets and value would be url param value)\r\n  const meetupId = context.params.meetupId;\r\n\r\n  // console.log(context.params);\r\n\r\n  // db connection\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://sam:Zxcvbnm-321@nextjs-practice.wbu0y.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  console.log(selectedMeetup);\r\n\r\n  const meetupData = {\r\n    id: selectedMeetup._id.toString(),\r\n    title: selectedMeetup.title,\r\n    address: selectedMeetup.address,\r\n    image: selectedMeetup.image,\r\n    description: selectedMeetup.description,\r\n  };\r\n\r\n  console.log(meetupData);\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData,\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetailPage;\r\n\r\n// {\r\n//   id: \"m1\",\r\n//   title: \"A First Meetup\",\r\n//   image:\r\n//     \"https://upload.wikimedia.org/wikipedia/commons/2/22/Hagia_Sophia_Mars_2013.jpg\",\r\n//   address: \"Sultan Ahmet, Ayasofya Meydan No:1, 34122 Fatih/İstanbul, Turkey\",\r\n//   description:\r\n//     \"Hagia Sophia, officially known as the Holy Hagia Sophia Grand Mosque, and formerly the Church of Hagia Sophia is a Late Antique place of worship in Istanbul, designed by the Greek geometers Isidore of Miletus and Anthemius of Tralles\",\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}